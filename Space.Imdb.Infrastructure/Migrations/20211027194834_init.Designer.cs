// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Space.Imdb.Infrastructure.Infrastructre;

namespace Space.Imdb.Infrastructure.Migrations
{
    [DbContext(typeof(ImdbMovieContext))]
    [Migration("20211027194834_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("DATEADD (hh,4,GETUTCDATE())");

                    b.Property<string>("FullTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ImDbRating")
                        .HasColumnType("float");

                    b.Property<string>("MovieId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.MoviePoster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AspectRatio")
                        .HasColumnType("float");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_MoviePosterId");

                    b.HasIndex("MovieId");

                    b.ToTable("Posters");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.MovieWikiShort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("PlainText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_MovieWikiShortId");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("WikiShort");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("DATEADD (hh,4,GETUTCDATE())");

                    b.Property<string>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("2021-10-27");

                    b.Property<int>("WatchListId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_NotificationId");

                    b.HasIndex("WatchListId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserName = "User_One"
                        },
                        new
                        {
                            Id = 2,
                            UserName = "User_Two"
                        },
                        new
                        {
                            Id = 3,
                            UserName = "User_Three"
                        });
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.Watchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("DATEADD (hh,4,GETUTCDATE())");

                    b.Property<string>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("2021-10-27");

                    b.Property<bool>("IsWatched")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PrimaryKey_WatchListId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Watchlist");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.MoviePoster", b =>
                {
                    b.HasOne("Space.Imdb.DB.Contracts.Entities.Movie", "Movie")
                        .WithMany("Posters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.MovieWikiShort", b =>
                {
                    b.HasOne("Space.Imdb.DB.Contracts.Entities.Movie", "Movie")
                        .WithOne("Wikipedia")
                        .HasForeignKey("Space.Imdb.DB.Contracts.Entities.MovieWikiShort", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.Notifications", b =>
                {
                    b.HasOne("Space.Imdb.DB.Contracts.Entities.Watchlist", "Watchlist")
                        .WithMany("Notifications")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.Watchlist", b =>
                {
                    b.HasOne("Space.Imdb.DB.Contracts.Entities.Movie", "Movie")
                        .WithMany("Watchlist")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Space.Imdb.DB.Contracts.Entities.Users", "Users")
                        .WithMany("Watchlist")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.Movie", b =>
                {
                    b.Navigation("Posters");

                    b.Navigation("Watchlist");

                    b.Navigation("Wikipedia");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.Users", b =>
                {
                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("Space.Imdb.DB.Contracts.Entities.Watchlist", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
